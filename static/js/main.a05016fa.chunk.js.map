{"version":3,"sources":["robots.js","components/card/Card.js","components/cardList/CardList.js","components/searchBox/SearchBox.js","Scroll.js","App.js","AppAPI.js","index.js"],"names":["robots","id","name","username","email","Card","className","alt","src","CardList","cardArray","map","robot","key","SearchBox","searchfield","searchChange","onChange","type","placeholder","Scroll","Component","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredrobots","this","filter","toLowerCase","includes","lenght","ReactDOM","render","AppAPI","document","getElementById"],"mappings":"uOAAaA,G,MAAS,CACrB,CACCC,GAAI,EACJC,KAAM,iBACNC,SAAU,OACVC,MAAO,gCAER,CACCH,GAAI,EACJC,KAAM,QACNC,SAAU,QACVC,MAAO,uBAER,CACCH,GAAI,EACJC,KAAM,iBACNC,SAAU,UACVC,MAAO,qBAER,CACCH,GAAI,EACJC,KAAM,aACNC,SAAU,QACVC,MAAO,uBAER,CACCH,GAAI,EACJC,KAAM,iBACNC,SAAU,QACVC,MAAO,uBAER,CACCH,GAAI,EACJC,KAAM,WACNC,SAAU,MACVC,MAAO,0BAER,CACCH,GAAI,EACJC,KAAM,YACNC,SAAU,QACVC,MAAO,2BAER,CACCH,GAAI,EACJC,KAAM,gBACNC,SAAU,MACVC,MAAO,qBAER,CACCH,GAAI,EACJC,KAAM,OACNC,SAAU,OACVC,MAAO,sBAER,CACCH,GAAI,GACJC,KAAM,gBACNC,SAAU,WACVC,MAAO,iCC3CMC,G,MAZF,SAAC,GAAyB,IAAvBH,EAAsB,EAAtBA,KAAME,EAAgB,EAAhBA,MAAOH,EAAS,EAATA,GAC5B,OACC,yBAAKK,UAAU,uDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BP,EAA1B,uBACrB,6BACC,4BAAKC,GACL,2BAAIE,OCCOK,EAPE,SAAC,GAAgB,IAC3BC,EAD0B,EAAbV,OACMW,KAAI,SAACC,GAC7B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAMX,GAAIA,GAAIW,EAAMX,GAAIC,KAAMU,EAAMV,KAAMC,SAAUS,EAAMT,SAAUC,MAAOQ,EAAMR,WAEpG,OAAO,6BAAMM,ICOCI,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aACjC,OACC,yBAAKV,UAAU,OACd,2BACCW,SAAUD,EACVV,UAAU,mCACVY,KAAK,SACLC,YAAY,oBCEDC,GCJGC,YDAH,SAACC,GACf,OAAO,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAAYJ,EAAMK,YE8CjFC,E,YA9Cd,WAAYN,GAAQ,IAAD,8BAClB,4CAAMA,KAkBPO,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAEhB,YAAae,EAAME,OAAOC,SAlB1C,EAAKC,MAAQ,CACZlC,OAAQ,GACRe,YAAa,IAJI,E,iFASE,IAAD,OACnBoB,MAAM,8CACJC,MAAK,SAACC,GACN,OAAOA,EAASC,UAEhBF,MAAK,SAACG,GACN,EAAKR,SAAS,CAAE/B,OAAQuC,S,+BAQjB,IAAD,OAEFC,EAAiBC,KAAKP,MAAMlC,OAAO0C,QAAO,SAAC9B,GAChD,OAAOA,EAAMV,KAAKyC,cAAcC,SAAS,EAAKV,MAAMnB,YAAY4B,kBAIjE,OAAiC,IAA7BF,KAAKP,MAAMlC,OAAO6C,OACd,uCAGN,yBAAKvC,UAAU,MACd,wBAAIA,UAAU,SAAd,iBACA,kBAAC,EAAD,CAAWU,aAAcyB,KAAKZ,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU7B,OAAQwC,U,GAvCNnB,a,MCDlByB,IAASC,OAAO,kBAACC,EAAD,MAAYC,SAASC,eAAe,U","file":"static/js/main.a05016fa.chunk.js","sourcesContent":["export const robots = [\n\t{\n\t\tid: 1,\n\t\tname: 'Luke Skywalker',\n\t\tusername: 'Luke',\n\t\temail: 'Luke.skywalker@starswars.com'\n\t},\n\t{\n\t\tid: 2,\n\t\tname: 'R2-D2',\n\t\tusername: 'R2-D2',\n\t\temail: 'R2-D2@starswars.com'\n\t},\n\t{\n\t\tid: 3,\n\t\tname: 'Obi-wan Kenobi',\n\t\tusername: 'Obi-wan',\n\t\temail: 'Obi@starswars.com'\n\t},\n\t{\n\t\tid: 4,\n\t\tname: 'Dark Vader',\n\t\tusername: 'Vader',\n\t\temail: 'Vader@starswars.com'\n\t},\n\t{\n\t\tid: 5,\n\t\tname: 'Princess Leila',\n\t\tusername: 'Leila',\n\t\temail: 'Leila@starswars.com'\n\t},\n\t{\n\t\tid: 6,\n\t\tname: 'Han Solo',\n\t\tusername: 'Han',\n\t\temail: 'Han.Solo@starswars.com'\n\t},\n\t{\n\t\tid: 7,\n\t\tname: 'Bobba Fet',\n\t\tusername: 'Bobba',\n\t\temail: 'Bobba.Fet@starswars.com'\n\t},\n\t{\n\t\tid: 8,\n\t\tname: 'Rey Skywalker',\n\t\tusername: 'Rey',\n\t\temail: 'Rey@starswars.com'\n\t},\n\t{\n\t\tid: 9,\n\t\tname: 'BB-8',\n\t\tusername: 'BB-8',\n\t\temail: 'BB-8@starswars.com'\n\t},\n\t{\n\t\tid: 10,\n\t\tname: 'Jar-Jar Binks',\n\t\tusername: 'Jar-Jar ',\n\t\temail: 'Jar-Jar.Binks@starswars.com'\n\t}\n];\n","/* rce => raccourci snipet */\nimport React from 'react';\nimport 'tachyons';\n\nconst Card = ({ name, email, id }) => {\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}test?size=200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from '../card/Card.js';\n\n//Ici CardList est une fonction pure, car il reçoit robots et renvoit robots sans aucune modification\nconst CardList = ({ robots }) => {\n\tconst cardArray = robots.map((robot) => {\n\t\treturn <Card key={robot.id} id={robot.id} name={robot.name} username={robot.username} email={robot.email} />;\n\t});\n\treturn <div>{cardArray}</div>;\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input\n\t\t\t\tonChange={searchChange}\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype='search'\n\t\t\t\tplaceholder='search robots'\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default SearchBox;\n","import React from 'react';\n//On a vue props, state mais aussi on peut utiliser Children, CardList est le children de Scroll\n//Chaque props a un Children\n// on peut return props.childre => il ne se passe rien\n// mais on peut aussi return <h1>Salut</h1>\n//Si on fait console.log(props)=>on peut trouver type=CardList\n\nconst Scroll = (props) => {\n\treturn <div style={{ overflowY: 'scroll', border: '2px solid black', height: '800px' }}>{props.children}</div>;\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\nimport './App.css';\n// import Card from './components/card/Card';\nimport { robots } from './robots';\nimport CardList from './components/cardList/CardList.js';\nimport SearchBox from './components/searchBox/SearchBox.js';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\trobots: robots,\n\t\t\tsearchfield: ''\n\t\t};\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchfield: event.target.value });\n\t\t// console.log(event.target.value);\n\t\t// const filteredrobots = this.state.robots.filter((robot) => {\n\t\t// \treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\t\t// });\n\t\t// console.log(filteredrobots);\n\t};\n\n\trender() {\n\t\tconst filteredrobots = this.state.robots.filter((robot) => {\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\t\t});\n\n\t\treturn (\n\t\t\t// Etape 1 : on duplique les composants Card\n\t\t\t// <div>\n\t\t\t// \t<Card id={robots[0].id} name={robots[0].name} email={robots[0].email} usrn={robots[0].username} />\n\t\t\t// \t<Card id={robots[1].id} name={robots[1].name} email={robots[1].email} usrn={robots[1].username} />\n\t\t\t// \t<Card id={robots[2].id} name={robots[2].name} email={robots[2].email} usrn={robots[2].username} />\n\t\t\t// </div>\n\n\t\t\t// Etape2: Créer composant CardList\n\n\t\t\t// Etape 3 : Créer SearchBox\n\n\t\t\t// Etape 4 :\n\t\t\t// CardList et SearchBox ont besoin de communiquer entre eux pour savoir quel carte rendre en\n\t\t\t// fonction de l'input. Les freres ne peuvent pas communiquer par contre ils ont un parent en commun.\n\t\t\t// Je créé la props searchChange et la fonction onSearchChange, et je l'envoie vers SearchBox\n\t\t\t//Dans onSearchChange : je fais console.log(event.target.value)\n\t\t\t// J'ai envoyé l'event d'enfant a parent, de searchBox à App, maintenant je peux faire communiquer APP avec CardList avec\n\t\t\t// ces nouvelles informations\n\t\t\t// Dans SearchBox j'ajoute onChange={searchChange} et dans ma methode onSearchChange:\t\tconst filteredrobots = this.state.robots.filter((robot) => {\n\t\t\t// \t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\t\t\t// \t});\n\t\t\t// \tconsole.log(filteredrobots);\n\t\t\t// };\n\t\t\t// Etape5 :\n\t\t\t// Maintenant je veux envoyer mes robots deja filtrer dans mon composant CardList.\n\t\t\t// au lieu de renvoyer this.state.robots j'envoie filteredrobots\n\t\t\t//Je laisse \t\tthis.setState({ searchfield: event.target.value }) dans onSearchChange\n\t\t\t// et je place filteredrobot dans mon this.render()\n\n\t\t\t// ******** NPM RUN BUILD **********\n\n\t\t\t//To deploy https://create-react-app.dev/docs/deployment/\n\n\t\t\t<div className='tc'>\n\t\t\t\t<h1>RobotsFriends</h1>\n\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\n\t\t\t\t<CardList robots={filteredrobots} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport { robots } from './robots';\nimport CardList from './components/cardList/CardList.js';\nimport SearchBox from './components/searchBox/SearchBox.js';\nimport Scroll from './Scroll';\n// https://jsonplaceholder.typicode.com/users\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t};\n\t}\n\n\t//Je fetch mes users depuis mon API\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.then((users) => {\n\t\t\t\tthis.setState({ robots: users });\n\t\t\t});\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchfield: event.target.value });\n\t};\n\n\trender() {\n\t\t// const {robots, searchfield} = this.state;\n\t\tconst filteredrobots = this.state.robots.filter((robot) => {\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\t\t});\n\t\t// if (!this.state.robots.length)\n\n\t\tif (this.state.robots.lenght === 0) {\n\t\t\treturn <h1>Loading</h1>;\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<h1 className='title'>RobotsFriends</h1>\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<CardList robots={filteredrobots} />\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport AppAPI from './AppAPI';\nimport './index.css';\n\nReactDOM.render(<AppAPI />, document.getElementById('root'));\n"],"sourceRoot":""}